{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","loaded","kycAddress","tokenSaleAddress","userTokens","componentDidMount","eth","getAccounts","accounts","net","getId","networkId","tokenInstance","Contract","MyToken","abi","networks","address","tokenSaleInstance","MyTokenSale","kycInstance","KycContract","listenToTokenTransfer","setState","updateUserTokens","alert","error","methods","balanceOf","call","events","Transfer","to","on","handleBuyTokens","buyTokens","send","from","value","utils","toWei","handleInputChange","event","target","type","checked","name","handleKycWhitelisting","setKycCompleted","this","className","onChange","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c9db2f6.chunk.js","sourcesContent":["import Web3 from \"web3\";\r\n\r\nconst getWeb3 = () =>\r\n  new Promise((resolve, reject) => {\r\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\r\n    window.addEventListener(\"load\", async () => {\r\n      // Modern dapp browsers...\r\n      if (window.ethereum) {\r\n        const web3 = new Web3(window.ethereum);\r\n        try {\r\n          // Request account access if needed\r\n          await window.ethereum.enable();\r\n          // Acccounts now exposed\r\n          resolve(web3);\r\n        } catch (error) {\r\n          reject(error);\r\n        }\r\n      }\r\n      // Legacy dapp browsers...\r\n      else if (window.web3) {\r\n        // Use Mist/MetaMask's provider.\r\n        const web3 = window.web3;\r\n        console.log(\"Injected web3 detected.\");\r\n        resolve(web3);\r\n      }\r\n      // Fallback to localhost; use dev console port by default...\r\n      else {\r\n        const provider = new Web3.providers.HttpProvider(\r\n          \"http://127.0.0.1:8545\"\r\n        );\r\n        const web3 = new Web3(provider);\r\n        console.log(\"No web3 instance injected, using Local web3.\");\r\n        resolve(web3);\r\n      }\r\n    });\r\n  });\r\n\r\nexport default getWeb3;\r\n","import React, { Component } from \"react\";\r\nimport MyToken from \"./contracts/MyToken.json\";\r\nimport MyTokenSale from \"./contracts/MyTokenSale.json\";\r\nimport KycContract from \"./contracts/KycContract.json\";\r\nimport getWeb3 from \"./getWeb3\";\r\nimport MintedCrowdSale from \"./contracts/MintedCrowdsale.json\";\r\n\r\n\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  state = { loaded: false, kycAddress: \"0x123...\", tokenSaleAddress: null, userTokens: 0 };\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      this.web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      this.accounts = await this.web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      this.networkId = await this.web3.eth.net.getId();\r\n\r\n      this.tokenInstance = new this.web3.eth.Contract(\r\n        MyToken.abi,\r\n        MyToken.networks[this.networkId] && MyToken.networks[this.networkId].address,\r\n      );\r\n\r\n      this.tokenSaleInstance = new this.web3.eth.Contract(\r\n        MyTokenSale.abi,\r\n        MyTokenSale.networks[this.networkId] && MyTokenSale.networks[this.networkId].address,\r\n      );\r\n      this.kycInstance = new this.web3.eth.Contract(\r\n        KycContract.abi,\r\n        KycContract.networks[this.networkId] && KycContract.networks[this.networkId].address,\r\n      );\r\n\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.listenToTokenTransfer();\r\n      this.setState({\r\n        loaded: true, tokenSaleAddress: MyTokenSale.networks[this.networkId].address\r\n      }, this.updateUserTokens);\r\n\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  updateUserTokens = async () => {\r\n    let userTokens = await this.tokenInstance.methods.balanceOf(this.accounts[0]).call();\r\n    this.setState({ userTokens: userTokens });\r\n  }\r\n\r\n  listenToTokenTransfer = () => {\r\n    this.tokenInstance.events.Transfer({ to: this.accounts[0] }).on(\"data\", this.updateUserTokens);\r\n  }\r\n\r\n  handleBuyTokens = async () => {\r\n    await this.tokenSaleInstance.methods.buyTokens(this.accounts[0]).send({from: this.accounts[0], value: this.web3.utils.toWei(\"1\",\"wei\")});\r\n  }\r\n\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n    const name = target.name;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n\r\n  handleKycWhitelisting = async () => {\r\n    await this.kycInstance.methods.setKycCompleted(this.state.kycAddress).send({ from: this.accounts[0] });\r\n    alert(\"KYC for \" + this.state.kycAddress + \" is completed\");\r\n  }\r\n\r\n  render() {\r\n    if (!this.state.loaded) {\r\n      return <div>Loading Web3, accounts, and contract...</div>;\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <h1>StarDucks Cappucino Token Sale</h1>\r\n        <p>Get your Tokens today!</p>\r\n        <h2>Kyc Whitelisting</h2>\r\n        Address to allow: <input type=\"text\" name=\"kycAddress\" value={this.state.kycAddress} onChange={this.handleInputChange} />\r\n        <button type=\"button\" onClick={this.handleKycWhitelisting}>Add to Whitelist</button>\r\n        <h2>Buy Tokens</h2>\r\n        <p>If you want to buy tokens, send Wei to this address: {this.state.tokenSaleAddress}</p>\r\n        <p>You currently have: {this.state.userTokens} CAPPU Tokens</p>\r\n        <button type=\"button\" onClick={this.handleBuyTokens}>Buy more tokens</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}